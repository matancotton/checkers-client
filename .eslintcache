[{"C:\\Users\\matan\\Checkers\\client\\src\\components\\checkersGame\\GameBoard.js":"1","C:\\Users\\matan\\Checkers\\client\\src\\components\\checkersGame\\GamePiece.js":"2","C:\\Users\\matan\\Checkers\\client\\src\\gameLogic\\boardLogic.js":"3","C:\\Users\\matan\\Checkers\\client\\src\\components\\routers\\AppRouter.js":"4","C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\PlayersContext.js":"5","C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\LoginContext.js":"6","C:\\Users\\matan\\Checkers\\client\\src\\components\\login\\Login.js":"7","C:\\Users\\matan\\Checkers\\client\\src\\components\\main\\Header.js":"8","C:\\Users\\matan\\Checkers\\client\\src\\components\\login\\Subscribe.js":"9","C:\\Users\\matan\\Checkers\\client\\src\\actions\\playersAction.js":"10","C:\\Users\\matan\\Checkers\\client\\src\\reducers\\playersReducer.js":"11","C:\\Users\\matan\\Checkers\\client\\src\\actions\\gameBoardAction.js":"12","C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\UserField.js":"13","C:\\Users\\matan\\Checkers\\client\\src\\gameLogic\\kingLogic.js":"14","C:\\Users\\matan\\Checkers\\client\\src\\components\\routers\\PrivateRouter.js":"15","C:\\Users\\matan\\Checkers\\client\\src\\sockets\\socket.js":"16","C:\\Users\\matan\\Checkers\\client\\src\\gameLogic\\pieceLogic.js":"17","C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\GameRoom.js":"18","C:\\Users\\matan\\Checkers\\client\\src\\reducers\\messagesReducer.js":"19","C:\\Users\\matan\\Checkers\\client\\src\\components\\messages\\Inbox.js":"20","C:\\Users\\matan\\Checkers\\client\\src\\reducers\\gameBoardReducer.js":"21","C:\\Users\\matan\\Checkers\\client\\src\\components\\messages\\RescivedMessage.js":"22","C:\\Users\\matan\\Checkers\\client\\src\\components\\messages\\Invitation.js":"23","C:\\Users\\matan\\Checkers\\client\\src\\reportWebVitals.js":"24","C:\\Users\\matan\\Checkers\\client\\src\\components\\routers\\LoginRoute.js":"25","C:\\Users\\matan\\Checkers\\client\\src\\reducers\\loginReducer.js":"26","C:\\Users\\matan\\Checkers\\client\\src\\server\\auth.js":"27","C:\\Users\\matan\\Checkers\\client\\src\\components\\profile\\Profile.js":"28","C:\\Users\\matan\\Checkers\\client\\src\\components\\home\\HomePage.js":"29","C:\\Users\\matan\\Checkers\\client\\src\\actions\\messagesAction.js":"30","C:\\Users\\matan\\Checkers\\client\\src\\index.js":"31","C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\MessagesContext.js":"32","C:\\Users\\matan\\Checkers\\client\\src\\components\\login\\LoginForm.js":"33","C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\Players.js":"34","C:\\Users\\matan\\Checkers\\client\\src\\cookies\\cookies.js":"35","C:\\Users\\matan\\Checkers\\client\\src\\actions\\loginAction.js":"36","C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\GameInfoBox.js":"37","C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\GameBoardContext.js":"38"},{"size":6634,"mtime":1608486703868,"results":"39","hashOfConfig":"40"},{"size":3087,"mtime":1608486922795,"results":"41","hashOfConfig":"40"},{"size":4247,"mtime":1608483863225,"results":"42","hashOfConfig":"40"},{"size":1568,"mtime":1606861323022,"results":"43","hashOfConfig":"40"},{"size":806,"mtime":1607028772233,"results":"44","hashOfConfig":"40"},{"size":642,"mtime":1606680613870,"results":"45","hashOfConfig":"40"},{"size":364,"mtime":1606565886283,"results":"46","hashOfConfig":"40"},{"size":1642,"mtime":1607880304453,"results":"47","hashOfConfig":"40"},{"size":6651,"mtime":1607442496310,"results":"48","hashOfConfig":"40"},{"size":222,"mtime":1606778826812,"results":"49","hashOfConfig":"40"},{"size":287,"mtime":1606838895735,"results":"50","hashOfConfig":"40"},{"size":82,"mtime":1607298668927,"results":"51","hashOfConfig":"40"},{"size":613,"mtime":1606853770022,"results":"52","hashOfConfig":"40"},{"size":3612,"mtime":1607883194581,"results":"53","hashOfConfig":"40"},{"size":597,"mtime":1606680469098,"results":"54","hashOfConfig":"40"},{"size":2240,"mtime":1608558483481,"results":"55","hashOfConfig":"40"},{"size":3272,"mtime":1608482470568,"results":"56","hashOfConfig":"40"},{"size":2885,"mtime":1608486673994,"results":"57","hashOfConfig":"40"},{"size":439,"mtime":1607077314924,"results":"58","hashOfConfig":"40"},{"size":1123,"mtime":1607210927078,"results":"59","hashOfConfig":"40"},{"size":374,"mtime":1608052721205,"results":"60","hashOfConfig":"40"},{"size":1484,"mtime":1607450302646,"results":"61","hashOfConfig":"40"},{"size":1200,"mtime":1607213450827,"results":"62","hashOfConfig":"40"},{"size":362,"mtime":1606460933713,"results":"63","hashOfConfig":"40"},{"size":580,"mtime":1606680458954,"results":"64","hashOfConfig":"40"},{"size":373,"mtime":1606839681594,"results":"65","hashOfConfig":"40"},{"size":1178,"mtime":1608558484722,"results":"66","hashOfConfig":"40"},{"size":579,"mtime":1606680383391,"results":"67","hashOfConfig":"40"},{"size":606,"mtime":1608489150320,"results":"68","hashOfConfig":"40"},{"size":183,"mtime":1606861025305,"results":"69","hashOfConfig":"40"},{"size":546,"mtime":1606473656116,"results":"70","hashOfConfig":"40"},{"size":765,"mtime":1607042381519,"results":"71","hashOfConfig":"40"},{"size":2887,"mtime":1606953117530,"results":"72","hashOfConfig":"40"},{"size":608,"mtime":1606853781662,"results":"73","hashOfConfig":"40"},{"size":552,"mtime":1607295034977,"results":"74","hashOfConfig":"40"},{"size":164,"mtime":1606493475512,"results":"75","hashOfConfig":"40"},{"size":3027,"mtime":1608485526844,"results":"76","hashOfConfig":"40"},{"size":770,"mtime":1607902292176,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},"14zgnyf",{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"85"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"95"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"95"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"95"},"C:\\Users\\matan\\Checkers\\client\\src\\components\\checkersGame\\GameBoard.js",["172","173"],"import { nanoid } from 'nanoid';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport { setBoardAction } from '../../actions/gameBoardAction';\r\nimport { isPlayerWon, movePiece, setMustEatPiecesList } from '../../gameLogic/boardLogic';\r\nimport { isAbleToEat,pieceEatMoves } from '../../gameLogic/pieceLogic';\r\nimport { isKingAbleToEat,kingEatingMoves } from '../../gameLogic/kingLogic';\r\nimport { addMessage, gameSockets, sendMessageSocket } from '../../sockets/socket';\r\nimport { GameBoardContext } from '../context/GameBoardContext';\r\nimport GamePiece from './GamePiece';\r\n\r\n\r\nconst GameBoard = (props)=>{\r\n    \r\n    const {gameBoardState,gameBoardDispatch} = useContext(GameBoardContext)\r\n    const [squares, setSquares] = useState([])\r\n    const [selectedPiece, setSelectedPiece] = useState(null)\r\n    const [pieceValidMoves,setPieceValidMoves] = useState([])\r\n    \r\n\r\n    const isSquareBlack = (index) => {\r\n        const isEvenColumn = index % 2 === 0;\r\n        const isEvenRow = Math.floor(index / 8) % 2 === 0;\r\n    \r\n        if (isEvenRow) {\r\n            return isEvenColumn ? false : true;\r\n        } else {\r\n            return isEvenColumn ? true : false;\r\n        }\r\n    };\r\n\r\n    const updateValidMoves = (validMoves,eatingMoves)=>{\r\n        const initSquares = [...squares]\r\n        if (eatingMoves.length > 0) {\r\n            validMoves = eatingMoves\r\n            for (let i=0; i<initSquares.length; i++) {\r\n                initSquares[i].color=isSquareBlack(i)?'black':'white'\r\n                validMoves.forEach((location)=>{\r\n                    if (location.row === parseInt(i/8) && location.column === i%8) {\r\n                        initSquares[i].color='red'\r\n                    } \r\n                })\r\n            }\r\n        } else {\r\n            for (let i=0; i<initSquares.length; i++) {\r\n                initSquares[i].color=isSquareBlack(i)?'black':'white'\r\n                validMoves.forEach((location)=>{\r\n                    if (location.row === parseInt(i/8) && location.column === i%8) {\r\n                        initSquares[i].color='green'\r\n                    } \r\n                })\r\n            }\r\n        }\r\n        \r\n        setSquares(initSquares)\r\n        setPieceValidMoves(validMoves)\r\n    }\r\n\r\n    const setBoard = (pieces)=>{\r\n        const initSquares = []\r\n        let squaresIndex = 0;\r\n        for (let i=0; i < 8; i++) {\r\n            for (let j=0; j< 8; j++) {\r\n                if (pieces[i][j] != null) {\r\n                    initSquares.push({color: isSquareBlack(squaresIndex)?'black':'white', piece: {...pieces[i][j]}, id: nanoid()})\r\n                }\r\n\r\n                else if (!!pieceValidMoves.find(place=>place.row===i&&place.column===j)) {\r\n                    initSquares.push({color: 'red', piece: null, id: nanoid()})\r\n                }\r\n\r\n                else {\r\n                    initSquares.push({color: isSquareBlack(squaresIndex)?'black':'white', piece: null, id: nanoid()})\r\n                }\r\n                squaresIndex++\r\n            }\r\n            \r\n        }\r\n        setSquares(initSquares)\r\n    }\r\n\r\n    const squareClicked = (row,column)=>{\r\n        if (selectedPiece==null) {\r\n            return\r\n        }\r\n        if (!!pieceValidMoves.find((location)=>(location.row===row && location.column===column))){\r\n                submitTurn(row,column)\r\n                if (!selectedPiece) {\r\n                    setPieceValidMoves([]) \r\n                }\r\n        }\r\n\r\n    }\r\n\r\n    const submitTurn = (row,column)=>{\r\n        const oldBoard = cloneDeep(gameBoardState)\r\n        const newBoard = movePiece(oldBoard,selectedPiece.row,selectedPiece.column,row,column)\r\n        let eatingMoves = []\r\n        let isEating = false\r\n        if (selectedPiece.isKing) {\r\n            eatingMoves = kingEatingMoves(newBoard, row, column)\r\n            isEating = isKingAbleToEat(gameBoardState,selectedPiece.row,selectedPiece.column,row,column)\r\n        } else {\r\n            eatingMoves = pieceEatMoves(newBoard,row,column)\r\n            isEating = isAbleToEat(gameBoardState,selectedPiece.row,selectedPiece.column,row,column)\r\n        }\r\n        \r\n        if (eatingMoves.length > 0 && isEating) {\r\n            setSelectedPiece({row,column, isEating: true})\r\n            console.log(selectedPiece)\r\n            setPieceValidMoves(eatingMoves)\r\n        } else {\r\n            newBoard.isWhite = !newBoard.isWhite\r\n            setSelectedPiece(null)\r\n            setPieceValidMoves([])\r\n        }\r\n        \r\n        gameBoardDispatch(setBoardAction(newBoard))\r\n        // setBoard(gameBoardState.pieces)\r\n        sendMessageSocket(props.opponent.socketId, {\r\n            type: 'GAME_MOVE',\r\n            content: {...newBoard}\r\n        })\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (isPlayerWon(gameBoardState,props.isMyColorWhite)) {\r\n            sendMessageSocket(props.opponent.socketId, {\r\n                type: 'GAME_OVER'\r\n            })\r\n            props.setIsWinner(true)\r\n        }\r\n        setBoard(gameBoardState.pieces)\r\n        props.setMustEatPieces(setMustEatPiecesList(gameBoardState,props.isMyColorWhite))\r\n        gameSockets(gameBoardDispatch,props.setIsWinner)\r\n\r\n    },[gameBoardState])\r\n\r\n\r\n    return (\r\n        <div className=\"board-container\">\r\n            {squares.map((square, i) => (\r\n\t\t\t\t<div\r\n                    className={`square-${square.color}`} key={square.id} \r\n                    onClick={(()=>{\r\n                        squareClicked(parseInt(i/8),i%8)\r\n                    })}>\r\n                    {square.piece != null && <GamePiece \r\n                                            isKing={square.piece.isKing}\r\n                                            color={square.piece.color} \r\n                                            isMyPiece={square.piece.isWhite === props.isMyColorWhite}\r\n                                            isMyTurn = {gameBoardState.isWhite===props.isMyColorWhite}\r\n                                            row={square.piece.row} column={square.piece.column}\r\n                                            isSelectedPiece = {selectedPiece != null && selectedPiece.row ===square.piece.row && selectedPiece.column === square.piece.column}\r\n                                            setSelectedPiece={setSelectedPiece}\r\n                                            selectedPiece = {selectedPiece}\r\n                                            updateValidMoves={updateValidMoves}\r\n                                            mustEatPieces={props.mustEatPieces}/>}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard;",["174","175"],"C:\\Users\\matan\\Checkers\\client\\src\\components\\checkersGame\\GamePiece.js",["176","177","178"],"import React, { useContext, useEffect, useState } from 'react';\nimport { kingValidMoves,kingEatingMoves } from '../../gameLogic/kingLogic';\nimport { pieceEatMoves, pieceValidMoves } from '../../gameLogic/pieceLogic';\nimport { GameBoardContext } from '../context/GameBoardContext';\n\n\nconst GamePiece = (props)=>{\n    \n    const {gameBoardState} = useContext(GameBoardContext)\n    const [isClicked, setIsClicked] = useState(false)\n    const [cssClassName, setCssClassName] = useState(props.color)\n\n    const PieceClicked = (e)=>{\n        e.stopPropagation();\n        if (cssClassName.includes('active-piece')) {\n            setCssClassName(`${props.color} my-piece`)\n            props.updateValidMoves([],[])\n            return\n        }\n        if (props.isKing) {\n            kingClicked()\n            return\n        }\n        const eatingMoves = pieceEatMoves(gameBoardState,props.row,props.column)\n        const validMoves = pieceValidMoves(gameBoardState,props.row,props.column)\n        if(validMoves.length > 0 || eatingMoves.length > 0) {\n            props.updateValidMoves(validMoves,eatingMoves)\n            setCssClassName(`${props.color} active-piece`)\n            props.setSelectedPiece({row: props.row, column: props.column})\n        }\n    }\n\n    const kingClicked = ()=>{\n        const eatingMoves = kingEatingMoves(gameBoardState,props.row,props.column)\n        const validMoves = kingValidMoves(gameBoardState,props.row,props.column)\n        if(validMoves.length > 0 || eatingMoves.length > 0) {\n            props.updateValidMoves(validMoves,eatingMoves)\n            setCssClassName(`${props.color} active-piece`)\n            props.setSelectedPiece({row: props.row, column: props.column, isKing: true})\n        }\n    }\n\n\n    useEffect(()=>{\n        // if (!!props.selectedPiece && props.selectedPiece.row !==props.row && props.selectedPiece.column !== props.column && props.selectedPiece.isEating) {\n        //     setCssClassName(props.color)\n            \n        // }\n        if (!!props.selectedPiece) {\n            if (props.selectedPiece.row===props.row && props.selectedPiece.column === props.column && props.isMyTurn) {\n                setCssClassName(`${props.color} active-piece`)\n                return\n            }\n            if (props.selectedPiece.isEating) {\n                setCssClassName(props.color)\n                return\n            }\n        }\n\n        if (props.mustEatPieces.length > 0) {\n            if (!!props.mustEatPieces.find((piece)=>(piece.row===props.row&&piece.column===props.column))) {\n                setCssClassName(`${props.color} my-piece`)\n            } else {\n                setCssClassName(props.color)\n            }\n            return\n        }\n         \n        if (props.isMyTurn && props.isMyPiece) {\n             \n            setCssClassName(`${props.color} my-piece`)\n               \n        }\n        \n    },[props.selectedPiece,props.isMyTurn])\n\n\n    return (\n        <div className={cssClassName}\n            onClick={cssClassName!==props.color?PieceClicked:(()=>{})}>\n\n        </div>\n    )\n}\n\nexport default GamePiece;",["179","180"],"C:\\Users\\matan\\Checkers\\client\\src\\gameLogic\\boardLogic.js",["181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"import { isAbleToEat, pieceEatMoves, pieceValidMoves } from \"./pieceLogic\"\r\n\r\nexport const setBoard = (pieces)=>{\r\n    for (let row=0; row<8;row++){\r\n        pieces[row]=[]\r\n        for (let column=0; column<8;column++){\r\n            if (row>=0&&row<=2){\r\n                if (row%2===0&&column%2===1 || row%2===1&&column%2===0)\r\n                    pieces[row][column]= {row,column,isWhite: false, color: 'black-piece'}\r\n                else\r\n                    pieces[row][column] = undefined\r\n            }\r\n            else if (row>=5&&row<=7){\r\n                if (row%2===0&&column%2===1 || row%2===1&&column%2===0)\r\n                    pieces[row][column]={row, column, isWhite: true, color: 'white-piece'}\r\n                else\r\n                    pieces[row][column] = undefined\r\n            }\r\n            else\r\n                if (row%2===0&&column%2===1 || row%2===1&&column%2===0)\r\n                    pieces[row][column] = null\r\n                else\r\n                    pieces[row][column] = undefined\r\n        }\r\n    }\r\n\r\n    return pieces\r\n}\r\n\r\nexport const movePiece = (board,fromRow,fromColumn,toRow,toColumn)=>{\r\n    if(board.pieces[fromRow][fromColumn]==null) {\r\n        return board\r\n    }\r\n            \r\n    if (isAbleToEat(board,fromRow,fromColumn,toRow,toColumn)){\r\n        let pieceRow = toRow-fromRow>0?toRow-1:toRow+1\r\n        let pieceColumn = toColumn-fromColumn>0?toColumn-1:toColumn+1\r\n        board.pieces[pieceRow][pieceColumn] = null\r\n    }\r\n    if ((toRow===0 && board.isWhite || toRow===7) && !board.pieces[fromRow][fromColumn].isKing)\r\n        board.pieces[fromRow][fromColumn] = {...board.pieces[fromRow][fromColumn], isKing: true, color:board.isWhite?'white-king':'black-king'}\r\n    board.pieces[toRow][toColumn] = {row:toRow, column: toColumn, isWhite:board.pieces[fromRow][fromColumn].isWhite, color:board.pieces[fromRow][fromColumn].color, isKing: board.pieces[fromRow][fromColumn].isKing}\r\n    board.pieces[fromRow][fromColumn] = null\r\n    // if (isAbleToEat(board,toRow,toColumn)&&isEating){\r\n    //     board.pieces[toRow][toColumn].MultipleEatings = true\r\n    //     // this.mustEatPieces.push(pieces[toRow][toColumn])\r\n    // }\r\n    // else\r\n    return {...board};\r\n}\r\n\r\nexport const setMustEatPiecesList = (board,isWhite)=>{\r\n    if (board.isWhite !== isWhite) {\r\n        return []\r\n    }\r\n    let mustEatPieces = []\r\n    for (let row=0;row<8;row++){\r\n        for (let column=0;column<8;column++){\r\n            if (board.pieces[row][column]==null)\r\n                continue\r\n            if (board.pieces[row][column].isWhite===isWhite){\r\n                if (pieceEatMoves(board, row, column).length > 0)\r\n                    mustEatPieces.push(board.pieces[row][column])\r\n            }\r\n        }\r\n    }\r\n    return mustEatPieces\r\n}\r\n\r\nexport const isPlayerWon = (board,isWhite)=>{\r\n    for (let row=0;row<8;row++){\r\n        for (let column=0;column<8;column++){\r\n            if (board.pieces[row][column]!=null)\r\n                if (board.pieces[row][column].isWhite!==isWhite)\r\n                    if (pieceEatMoves(board,row,column).length > 0 || pieceValidMoves(board,row,column).length > 0)\r\n                        return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n// class CheckersGame{\r\n//     constructor(){\r\n//         this.IsWhite=true\r\n//         pieces = [];\r\n//         this.mustEatPieces=[]\r\n//     }\r\n    \r\n\r\n//     SetMustEatPiecesList(){\r\n//         for (let row=0;row<8;row++){\r\n//             for (let column=0;column<8;column++){\r\n//                 if (pieces[row][column]==null)\r\n//                     continue\r\n//                 if (pieces[row][column].IsWhite===this.IsWhite){\r\n//                     if (pieces[row][column].IsAbleToEat(pieces))\r\n//                         this.mustEatPieces.push(pieces[row][column])\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n//     IsPieceInMustEatList(piece){\r\n//         for (let i=0;i<this.mustEatPieces.length;i++)\r\n//             if (this.mustEatPieces[i]===piece)\r\n//                 return true\r\n//         return false\r\n//     }\r\n//     ChangeTurn =function(){\r\n//         this.IsWhite = !this.IsWhite\r\n//         this.mustEatPieces=[]\r\n//         this.SetMustEatPiecesList()\r\n//     }\r\n\r\n// }\r\n\r\n\r\n","C:\\Users\\matan\\Checkers\\client\\src\\components\\routers\\AppRouter.js",[],["195","196"],"C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\PlayersContext.js",["197","198","199","200","201"],"import React, { createContext, useContext, useEffect, useReducer} from 'react';\r\nimport { setPlayersAction } from '../../actions/playersAction';\r\nimport playersReducer, { initialPlayersState } from '../../reducers/playersReducer';\r\nimport { disconnectSocket, getOnlinePlayers } from '../../sockets/socket';\r\nimport { LoginContext } from './LoginContext';\r\n\r\nexport const PlayersContext = createContext();\r\n\r\nconst PlayersContextProvider = (props)=>{\r\n    const {userState} = useContext(LoginContext)\r\n    const [playersState, playersDispatch] = useReducer(playersReducer,initialPlayersState)\r\n    \r\n\r\n    return (\r\n        <PlayersContext.Provider value={{playersState, playersDispatch}}>\r\n            {props.children}\r\n        </PlayersContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PlayersContextProvider;",["202","203"],"C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\LoginContext.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\login\\Login.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\main\\Header.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\login\\Subscribe.js",[],["204","205"],"C:\\Users\\matan\\Checkers\\client\\src\\actions\\playersAction.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\reducers\\playersReducer.js",[],["206","207"],"C:\\Users\\matan\\Checkers\\client\\src\\actions\\gameBoardAction.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\UserField.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\gameLogic\\kingLogic.js",["208","209"],"\r\n\r\nexport const isKingValidMove=(board,fromRow,fromColumn,endRow,endColumn)=>{\r\n    // if (this.PiecesToEat(board).length>0){\r\n    //     if (this.IsAbleToEat(board,endRow,endColumn)) \r\n    //         return true\r\n    //     else\r\n    //         return false\r\n    // }\r\n    let changeRow=endRow-fromRow>0?1:-1\r\n    let changeColumn=endColumn-fromColumn>0?1:-1\r\n    let row = endRow\r\n    let column = endColumn\r\n    while (row!==fromRow&&column!=changeColumn){\r\n            if (board.pieces[row][column]!==null)\r\n                return false\r\n        row-=changeRow\r\n        column-=changeColumn\r\n    }\r\n    return true       \r\n}\r\nexport const isKingAbleToEat=(board,fromRow,fromColumn,endRow,endColumn)=>{\r\n    // if (endRow==null || endColumn==null){\r\n    //     if (this.PiecesToEat(board).length>0)\r\n    //         return true\r\n    //     return false\r\n    // }\r\n    let eatenPieceRow=endRow-fromRow>0?endRow-1:endRow+1\r\n    let eatenPieceColumn=endColumn-fromColumn>0?endColumn-1:endColumn+1\r\n    if (eatenPieceColumn<0||eatenPieceColumn>7||eatenPieceRow<0||eatenPieceRow>7)\r\n        return false\r\n    let eatenPiece = board.pieces[eatenPieceRow][eatenPieceColumn];\r\n    let changeRow = endRow-fromRow>0?1:-1\r\n    let changeColumn = endColumn-fromColumn>0?1:-1\r\n    if (eatenPiece==null || board.pieces[endRow][endColumn]!==null)\r\n        return false\r\n    if (eatenPiece.isWhite===board.isWhite)\r\n        return false\r\n    let row = fromRow+changeRow\r\n    let column = fromColumn+changeColumn\r\n    if (row<0||row>7||column<0||column>7)\r\n        return false\r\n    while (row!==eatenPieceRow&&column!=eatenPieceColumn){\r\n        if (board.pieces[row][column]!==null)\r\n            return false\r\n        row+=changeRow\r\n        column+=changeColumn\r\n        if (row<0||row>7||column<0||column>7)\r\n            return false\r\n    }\r\n    if (row===eatenPieceRow&& column===eatenPieceColumn)\r\n        return true\r\n    return false\r\n}\r\n\r\nexport const kingValidMoves = (board,fromRow,fromColumn)=>{\r\n    let moves=[]\r\n    validMovesInDiagonal(board,moves,fromRow,fromColumn,fromRow+1,fromColumn+1,+1,+1)\r\n    validMovesInDiagonal(board,moves,fromRow,fromColumn,fromRow-1,fromColumn+1,-1,+1)\r\n    validMovesInDiagonal(board,moves,fromRow,fromColumn,fromRow+1,fromColumn-1,+1,-1)\r\n    validMovesInDiagonal(board,moves,fromRow,fromColumn,fromRow-1,fromColumn-1,-1,-1)\r\n    return moves\r\n}\r\n\r\nexport const validMovesInDiagonal = (board,moves,fromRow,fromColumn,row,column,changeRow,changeColumn)=>{\r\n    while (row>=0 && row<8 && column >=0 && column < 8)\r\n    {\r\n        if (isKingValidMove(board,fromRow,fromColumn,row,column))\r\n            moves.push({row,column})\r\n        else\r\n            return\r\n        row+=changeRow;\r\n        column+=changeColumn;\r\n    }\r\n}\r\n\r\nexport const kingEatingMoves = (board,fromRow,fromColumn)=>{\r\n    let pieces=[]\r\n    for (let row=0;row<8;row++)\r\n        for (let column=0;column<8;column++){\r\n            if (board.pieces[row][column]===undefined)\r\n                continue\r\n            if (isKingAbleToEat(board,fromRow,fromColumn,row,column))\r\n                pieces.push({row,column})\r\n        }\r\n    return pieces\r\n}\r\n\r\n\r\n// class Queen extends Piece{\r\n//     constructor(row,column,isWhite){\r\n//         super(row,column,isWhite)\r\n//         this.IsQueen = true\r\n//     }\r\n//     IsAbleToMove = function(board){\r\n//         for (let row=0;row<8;row++){\r\n//             for (let column=0;column<8;column++){\r\n//                 if (this.IsValidMove(board,row,column))\r\n//                     return true\r\n//             }\r\n//         }\r\n//         return false\r\n//     }\r\n\r\n// }","C:\\Users\\matan\\Checkers\\client\\src\\components\\routers\\PrivateRouter.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\sockets\\socket.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\gameLogic\\pieceLogic.js",["210"],"import {isKingAbleToEat, kingEatingMoves, kingValidMoves} from './kingLogic'\r\n\r\nexport const isAbleToEat=(board,fromRow,fromColumn,endRow,endColumn)=>{\r\n    if (board.pieces[fromRow][fromColumn].isKing && isKingAbleToEat(board,fromRow,fromColumn,endRow,endColumn)) {\r\n        return true\r\n    }\r\n    let finalSquare;\r\n    let middleSquare;\r\n    if (endRow<0||endRow>7||endColumn<0||endColumn>7)\r\n        return false\r\n    if (endColumn-fromColumn!==-2 && endColumn-fromColumn!== 2)\r\n        return false\r\n    let differenceRow=board.isWhite?-2:2\r\n    if (endRow-fromRow!==differenceRow)\r\n        return false\r\n    let middleRow = board.isWhite?fromRow-1:fromRow+1\r\n    let middleColumn = endColumn-fromColumn>0?endColumn-1:endColumn+1\r\n    finalSquare = board.pieces[endRow][endColumn]\r\n    middleSquare = board.pieces[middleRow][middleColumn]\r\n    if (finalSquare!==null)\r\n        return false\r\n    if (middleSquare==null)\r\n        return false\r\n    if (middleSquare.isWhite===board.isWhite)\r\n        return false\r\n    return true\r\n}\r\n\r\nexport const pieceEatMoves = (board,row,column)=>{\r\n    if (!!board.pieces[row][column] && board.pieces[row][column].isKing) {\r\n        return kingEatingMoves(board,row,column)\r\n    }\r\n    const validMoves = []\r\n    let eatRow=board.isWhite?-2:2;\r\n    if (isAbleToEat(board,row,column,row+eatRow,column-2)) {\r\n        validMoves.push({row:row+eatRow, column:column-2})\r\n    }\r\n        \r\n    if (isAbleToEat(board,row,column,row+eatRow,column+2)) {\r\n        validMoves.push({row:row+eatRow, column:column+2})\r\n    }\r\n        \r\n    return validMoves\r\n}\r\n\r\nexport const pieceValidMoves = (board,row,column)=>{\r\n    const validMoves = []\r\n    if (pieceEatMoves(board,row,column).length > 0)\r\n        return []\r\n    let endRow = board.isWhite?row-1:row+1;\r\n    if (isValidMove(board,row,column,endRow,column+1))\r\n        validMoves.push({row:endRow, column: column+1})\r\n    if (isValidMove(board,row,column,endRow,column-1))\r\n        validMoves.push({row:endRow, column: column-1})\r\n    return validMoves\r\n}\r\n\r\nexport const isValidMove=(board,fromRow,fromColumn,endRow,endColumn)=>{\r\n    if (endRow<0||endRow>7||endColumn<0||endColumn>7)\r\n        return false\r\n    let differenceRow=board.isWhite?-1:1;\r\n    // if (board.isAbleToEat(board)){\r\n    //     if (board.isAbleToEat(board,endRow,endColumn)) \r\n    //         return true\r\n    //     else\r\n    //         return false\r\n    // }\r\n    if (endRow===fromRow+differenceRow&&(endColumn===fromColumn-1||endColumn===fromColumn+1))\r\n        if (board.pieces[endRow][endColumn]===null)\r\n            return true\r\n    return false        \r\n}\r\n\r\n// class Piece{\r\n//     constructor(row,column,isWhite){\r\n//         fromRow = row;\r\n//         fromColumn=column;\r\n//         board.isWhite=isWhite;\r\n//         board.isQueen= false;\r\n//         this.MultipleEatings = false\r\n//     }\r\n\r\n\r\n\r\n//     PiecesToEat(board){\r\n//         let pieces=[]\r\n//         for (let row=0;row<8;row++)\r\n//             for (let column=0;column<8;column++){\r\n//                 if (board[row][column]===undefined)\r\n//                     continue\r\n//                 if (board.isAbleToEat(board,row,column))\r\n//                     pieces.push([row,column])\r\n//             }\r\n//         return pieces\r\n//     }\r\n// }","C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\GameRoom.js",["211","212"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { addMessage, connectSocket, disconnectSocket, setOnlinePlayers } from '../../sockets/socket';\r\nimport GameBoard from '../checkersGame/GameBoard';\r\nimport GameBoardContextProvider from '../context/GameBoardContext';\r\nimport { LoginContext } from '../context/LoginContext';\r\nimport { MessagesContext } from '../context/MessagesContext';\r\nimport { PlayersContext } from '../context/PlayersContext';\r\nimport Inbox from '../messages/Inbox';\r\nimport GameInfoBox from './GameInfoBox';\r\nimport Players from './Players';\r\n\r\nconst GameRoom = ()=>{\r\n    const {userState} = useContext(LoginContext)\r\n    const {playersDispatch} = useContext(PlayersContext)\r\n    const {messagesState, messagesDispatch} = useContext(MessagesContext)\r\n    const [isInboxVisible, setIsInboxVisible] = useState(messagesState.length>0)\r\n    const [isDisplayedBoard, setIsDisplayedBoard] = useState(false)\r\n    const [isFirstLoad,setIsFirstLoad] = useState(true)\r\n    const [isWhite, setIsWhite] = useState(undefined)\r\n    const [opponent, setOpponent] = useState({name:'',color:''})\r\n    const [mustEatPieces, setMustEatPieces] = useState([])\r\n    const [isWinner, setIsWinner] = useState(null)\r\n    \r\n    useEffect(()=>{\r\n\r\n        if (isFirstLoad) {\r\n            connectSocket(userState.user.username)\r\n            setIsFirstLoad(false)\r\n\r\n        }\r\n        setOnlinePlayers(playersDispatch,userState.user.username)\r\n        addMessage(messagesDispatch,setIsInboxVisible,setIsDisplayedBoard,setOpponent,setIsWhite)\r\n\r\n        return ()=>{\r\n            disconnectSocket()\r\n        }\r\n        \r\n    },[userState])\r\n    return (\r\n        <div className=\"waiting-room\">\r\n            <Players />\r\n            {isDisplayedBoard?\r\n                <GameBoardContextProvider>\r\n                    <GameBoard \r\n                    isMyColorWhite={isWhite} \r\n                    opponent={opponent}\r\n                    setMustEatPieces={setMustEatPieces}\r\n                    mustEatPieces={mustEatPieces}\r\n                    setIsWinner = {setIsWinner}/>\r\n                    <GameInfoBox \r\n                        isWhite={isWhite} \r\n                        setIsWhite={setIsWhite}\r\n                        opponent={opponent}\r\n                        isWhite={isWhite} \r\n                        mustEatList = {mustEatPieces}\r\n                        isWinner = {isWinner} />\r\n                </GameBoardContextProvider>\r\n            :\r\n                <h1>Invite a player to play with</h1>}\r\n\r\n\r\n            {!!isInboxVisible &&  <Inbox isDisplayedBoard={isDisplayedBoard} \r\n                                    setIsInboxVisible={setIsInboxVisible} \r\n                                    setIsDisplayedBoard={setIsDisplayedBoard}\r\n                                    setOpponent={setOpponent}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameRoom;","C:\\Users\\matan\\Checkers\\client\\src\\reducers\\messagesReducer.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\messages\\Inbox.js",["213"],"import React, { useContext, useEffect} from 'react';\r\nimport { MessagesContext } from '../context/MessagesContext';\r\nimport ResciveMessage from './RescivedMessage';\r\n\r\n\r\nconst Inbox = (props)=>{\r\n    const {messagesState} = useContext(MessagesContext)\r\n    const onCloseClicked = ()=>{\r\n        props.setIsInboxVisible(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"inbox-container\">\r\n            <span className=\"close-inbox\" onClick={onCloseClicked}>X</span>\r\n            <h3 className=\"title\">Messages</h3>\r\n            <div className=\"messages\">\r\n                {\r\n                    messagesState.map((message,index)=>(\r\n                        <ResciveMessage key={message.id} message={message.content} index={index} \r\n                        setIsDisplayedBoard={props.setIsDisplayedBoard} socketId={message.socketId}\r\n                        setIsInboxVisible={props.setIsInboxVisible}\r\n                        name={message.name}\r\n                        setOpponent={props.setOpponent}/>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inbox;","C:\\Users\\matan\\Checkers\\client\\src\\reducers\\gameBoardReducer.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\messages\\RescivedMessage.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\messages\\Invitation.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\reportWebVitals.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\routers\\LoginRoute.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\reducers\\loginReducer.js",[],["214","215"],"C:\\Users\\matan\\Checkers\\client\\src\\server\\auth.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\profile\\Profile.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\home\\HomePage.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\actions\\messagesAction.js",[],["216","217"],"C:\\Users\\matan\\Checkers\\client\\src\\index.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\MessagesContext.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\login\\LoginForm.js",[],["218","219"],"C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\Players.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\cookies\\cookies.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\actions\\loginAction.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\rooms\\GameInfoBox.js",[],"C:\\Users\\matan\\Checkers\\client\\src\\components\\context\\GameBoardContext.js",["220","221"],"import React, { createContext, useReducer, useEffect } from 'react';\r\nimport gameBoardReducer, { initialBoard } from '../../reducers/gameBoardReducer';\r\nimport {setBoardAction} from '../../actions/gameBoardAction'\r\n\r\nexport const GameBoardContext = createContext();\r\n\r\nconst GameBoardContextProvider = (props)=>{\r\n\r\n    const [gameBoardState, gameBoardDispatch] = useReducer(gameBoardReducer,initialBoard)\r\n\r\n    // useEffect(()=>{\r\n\r\n    //     return ()=>{\r\n    //         gameBoardDispatch(setBoardAction(initialBoard))\r\n    //     }\r\n    // })\r\n    \r\n    return (\r\n        <GameBoardContext.Provider value={{gameBoardState, gameBoardDispatch}}>\r\n            {props.children}\r\n        </GameBoardContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GameBoardContextProvider;",{"ruleId":"222","severity":1,"message":"223","line":8,"column":10,"nodeType":"224","messageId":"225","endLine":8,"endColumn":20},{"ruleId":"226","severity":1,"message":"227","line":138,"column":7,"nodeType":"228","endLine":138,"endColumn":23,"suggestions":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"222","severity":1,"message":"234","line":10,"column":12,"nodeType":"224","messageId":"225","endLine":10,"endColumn":21},{"ruleId":"222","severity":1,"message":"235","line":10,"column":23,"nodeType":"224","messageId":"225","endLine":10,"endColumn":35},{"ruleId":"226","severity":1,"message":"236","line":75,"column":7,"nodeType":"228","endLine":75,"endColumn":43,"suggestions":"237"},{"ruleId":"230","replacedBy":"238"},{"ruleId":"232","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":8,"column":30,"nodeType":"242","messageId":"243","endLine":8,"endColumn":32},{"ruleId":"240","severity":1,"message":"241","line":8,"column":45,"nodeType":"242","messageId":"243","endLine":8,"endColumn":47},{"ruleId":"240","severity":1,"message":"244","line":8,"column":45,"nodeType":"242","messageId":"243","endLine":8,"endColumn":47},{"ruleId":"240","severity":1,"message":"244","line":8,"column":57,"nodeType":"242","messageId":"243","endLine":8,"endColumn":59},{"ruleId":"240","severity":1,"message":"241","line":14,"column":30,"nodeType":"242","messageId":"243","endLine":14,"endColumn":32},{"ruleId":"240","severity":1,"message":"241","line":14,"column":45,"nodeType":"242","messageId":"243","endLine":14,"endColumn":47},{"ruleId":"240","severity":1,"message":"244","line":14,"column":45,"nodeType":"242","messageId":"243","endLine":14,"endColumn":47},{"ruleId":"240","severity":1,"message":"244","line":14,"column":57,"nodeType":"242","messageId":"243","endLine":14,"endColumn":59},{"ruleId":"240","severity":1,"message":"241","line":20,"column":30,"nodeType":"242","messageId":"243","endLine":20,"endColumn":32},{"ruleId":"240","severity":1,"message":"241","line":20,"column":45,"nodeType":"242","messageId":"243","endLine":20,"endColumn":47},{"ruleId":"240","severity":1,"message":"244","line":20,"column":45,"nodeType":"242","messageId":"243","endLine":20,"endColumn":47},{"ruleId":"240","severity":1,"message":"244","line":20,"column":57,"nodeType":"242","messageId":"243","endLine":20,"endColumn":59},{"ruleId":"240","severity":1,"message":"241","line":40,"column":20,"nodeType":"242","messageId":"243","endLine":40,"endColumn":22},{"ruleId":"240","severity":1,"message":"241","line":40,"column":37,"nodeType":"242","messageId":"243","endLine":40,"endColumn":39},{"ruleId":"230","replacedBy":"245"},{"ruleId":"232","replacedBy":"246"},{"ruleId":"222","severity":1,"message":"247","line":1,"column":44,"nodeType":"224","messageId":"225","endLine":1,"endColumn":53},{"ruleId":"222","severity":1,"message":"248","line":2,"column":10,"nodeType":"224","messageId":"225","endLine":2,"endColumn":26},{"ruleId":"222","severity":1,"message":"249","line":4,"column":10,"nodeType":"224","messageId":"225","endLine":4,"endColumn":26},{"ruleId":"222","severity":1,"message":"250","line":4,"column":28,"nodeType":"224","messageId":"225","endLine":4,"endColumn":44},{"ruleId":"222","severity":1,"message":"251","line":10,"column":12,"nodeType":"224","messageId":"225","endLine":10,"endColumn":21},{"ruleId":"230","replacedBy":"252"},{"ruleId":"232","replacedBy":"253"},{"ruleId":"230","replacedBy":"254"},{"ruleId":"232","replacedBy":"255"},{"ruleId":"230","replacedBy":"256"},{"ruleId":"232","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":14,"column":33,"nodeType":"260","messageId":"261","endLine":14,"endColumn":35},{"ruleId":"258","severity":1,"message":"259","line":43,"column":39,"nodeType":"260","messageId":"261","endLine":43,"endColumn":41},{"ruleId":"222","severity":1,"message":"262","line":1,"column":43,"nodeType":"224","messageId":"225","endLine":1,"endColumn":57},{"ruleId":"226","severity":1,"message":"263","line":38,"column":7,"nodeType":"228","endLine":38,"endColumn":18,"suggestions":"264"},{"ruleId":"265","severity":1,"message":"266","line":54,"column":25,"nodeType":"267","endLine":54,"endColumn":42},{"ruleId":"222","severity":1,"message":"247","line":1,"column":29,"nodeType":"224","messageId":"225","endLine":1,"endColumn":38},{"ruleId":"230","replacedBy":"268"},{"ruleId":"232","replacedBy":"269"},{"ruleId":"230","replacedBy":"270"},{"ruleId":"232","replacedBy":"271"},{"ruleId":"230","replacedBy":"272"},{"ruleId":"232","replacedBy":"273"},{"ruleId":"222","severity":1,"message":"247","line":1,"column":44,"nodeType":"224","messageId":"225","endLine":1,"endColumn":53},{"ruleId":"222","severity":1,"message":"274","line":3,"column":9,"nodeType":"224","messageId":"225","endLine":3,"endColumn":23},"no-unused-vars","'addMessage' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameBoardDispatch', 'props', and 'setBoard'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["275"],"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"'isClicked' is assigned a value but never used.","'setIsClicked' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.color', 'props.column', 'props.isMyPiece', 'props.mustEatPieces', and 'props.row'. Either include them or remove the dependency array. If 'setCssClassName' needs the current value of 'props.color', you can also switch to useReducer instead of useState and read 'props.color' in the reducer.",["278"],["276"],["277"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.",["276"],["277"],"'useEffect' is defined but never used.","'setPlayersAction' is defined but never used.","'disconnectSocket' is defined but never used.","'getOnlinePlayers' is defined but never used.","'userState' is assigned a value but never used.",["276"],["277"],["276"],["277"],["276"],["277"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'kingValidMoves' is defined but never used.","React Hook useEffect has missing dependencies: 'isFirstLoad', 'messagesDispatch', and 'playersDispatch'. Either include them or remove the dependency array.",["279"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["276"],["277"],["276"],["277"],["276"],["277"],"'setBoardAction' is defined but never used.",{"desc":"280","fix":"281"},"no-global-assign","no-unsafe-negation",{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [gameBoardDispatch, gameBoardState, props, setBoard]",{"range":"286","text":"287"},"Update the dependencies array to be: [props.selectedPiece, props.isMyTurn, props.mustEatPieces, props.isMyPiece, props.row, props.column, props.color]",{"range":"288","text":"289"},"Update the dependencies array to be: [isFirstLoad, messagesDispatch, playersDispatch, userState]",{"range":"290","text":"291"},[5224,5240],"[gameBoardDispatch, gameBoardState, props, setBoard]",[2874,2910],"[props.selectedPiece, props.isMyTurn, props.mustEatPieces, props.isMyPiece, props.row, props.column, props.color]",[1642,1653],"[isFirstLoad, messagesDispatch, playersDispatch, userState]"]